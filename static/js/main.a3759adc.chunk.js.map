{"version":3,"sources":["Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","useState","count","setCount","className","onClick","App","props","addition","setState","state","handleClick","handleClickAdd","handleClickRemove","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQA4BeA,EAzBC,WAAO,IAAD,EACMC,mBAAS,GADf,mBACbC,EADa,KACNC,EADM,KAQpB,OACE,6BACA,qCAEE,yBAAKC,UAAqB,IAAVF,EAAc,iBAAmBA,EAAO,KAAO,EAAI,cAAgBA,EAAO,IAAM,EAAI,cAAgB,aAAcG,QAAS,kBAAMF,EAASD,EAAQ,KAAI,4BAAKA,IAE7K,yBAAKE,UAAY,WACf,4BAAQC,QAAS,kBAAMF,EAAS,KAAhC,iBACA,4BAAQE,QAAS,kBAAMF,EAASD,EAAM,KAAtC,WACA,4BAAQG,QAASH,EAAQ,EAAI,kBAAMC,EAASD,EAAM,IAAK,kBAAMC,EAAS,KAAtE,iBCwCSG,E,YArDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIVC,SAAW,WACT,EAAKC,SAAU,CACbP,MAAO,EAAKQ,MAAMR,MAAQ,KAPT,EAWrBS,YAAc,WACZ,EAAKF,SAAU,CACbP,MAAO,KAbU,EAiBrBU,eAAiB,WACf,EAAKH,SAAU,CACbP,MAAO,EAAKQ,MAAMR,MAAQ,KAnBT,EAuBrBW,kBAAoB,WACd,EAAKH,MAAMR,MAAQ,GACvB,EAAKO,SAAU,CAACP,MAAO,EAAKQ,MAAMR,MAAQ,KAvBxC,EAAKQ,MAAQ,CAAER,MAAO,GAFL,E,sEAgCnB,OACE,yBAAKE,UAAY,OACjB,2CACA,yBAAKA,UAAY,UACf,yBAAKA,UAAWU,KAAKJ,MAAMR,MAAO,IAAM,EAAI,cAAgB,aAAeG,QAASS,KAAKN,UACzF,4BAAKM,KAAKJ,MAAMR,SAGlB,yBAAKE,UAAY,WACf,4BAAQC,QAASS,KAAKH,aAAtB,iBACA,4BAAQN,QAASS,KAAKF,gBAAtB,WACA,4BAAQP,QAASS,KAAKD,mBAAtB,eAEF,kBAAC,EAAD,W,GA9CcE,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.a3759adc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst Counter = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  //let ab =\r\n    //count === 0 ? 'circle neutral' ? : count %10 ===0 ? 'circle pink' : count %2 === 0 ? 'circle even' : 'circle odd'\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    <h2>Hooks</h2>\r\n\r\n      <div className={count === 0 ? 'circle neutral' : count %10 === 0 ? 'circle pink' : count %2 === 0 ? 'circle even' : 'circle odd'} onClick={() => setCount(count + 1)}><h1>{count}</h1></div>\r\n\r\n    <div className = 'buttons'>\r\n      <button onClick={() => setCount(0)}>Reset counter</button>\r\n      <button onClick={() => setCount(count+1)}>Add one</button>\r\n      <button onClick={count > 0 ? () => setCount(count-1) : () => setCount(0)}>Remove one</button>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Counter from './Counter';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\naddition = () => {\n  this.setState ({\n    count: this.state.count + 1\n  });\n};\n\nhandleClick = () => {\n  this.setState ({\n    count: 0\n  });\n}\n\nhandleClickAdd = () => {\n  this.setState ({\n    count: this.state.count + 1\n  });\n}\n\nhandleClickRemove = () => {\n  if (this.state.count > 0){\n  this.setState ({count: this.state.count - 1\n  });\n}\n}\n\n\nrender() {\n  return (\n    <div className = 'App'>\n    <h2>Class based</h2>\n    <div className = 'circle'>\n      <div className={this.state.count %2 === 0 ? \"circle even\" : \"circle odd\" } onClick={this.addition}>\n      <h1>{this.state.count}</h1>\n      </div>\n    </div>\n    <div className = 'buttons'>\n      <button onClick={this.handleClick}>Reset counter</button>\n      <button onClick={this.handleClickAdd}>Add one</button>\n      <button onClick={this.handleClickRemove}>Remove one</button>\n    </div>\n    <Counter/>\n    </div>\n\n);\n}\n\n}\n\nexport default App;\n\n//class based component\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Counter from './Counter';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}